<?xml version="1.0" ?>
<sdf version="1.6">
  <world name="sand">

    <!-- Base Gazebo plugins -->
    <plugin
        filename="gz-sim-physics-system"
        name="gz::sim::systems::Physics">
    </plugin>
    <plugin
        filename="gz-sim-user-commands-system"
        name="gz::sim::systems::UserCommands">
    </plugin>
    <plugin
        filename="gz-sim-scene-broadcaster-system"
        name="gz::sim::systems::SceneBroadcaster">
    </plugin>
    <plugin
        filename="gz-sim-sensors-system"
        name="gz::sim::systems::Sensors">
<!--      <render_engine>ogre</render_engine>-->
    </plugin>

    <!-- IMU plugin manages all IMU sensors -->
    <plugin
        filename="libgz-sim-imu-system.so"
        name="gz::sim::systems::Imu">
    </plugin>

    <!-- Buoyancy plugin manages buoyancy for all models -->
    <plugin
        filename="gz-sim-buoyancy-system"
        name="gz::sim::systems::Buoyancy">
      <!-- Fluid density is 1 (air) above 0 and 1000 (water) below 0 -->
      <graded_buoyancy>
        <default_density>1000</default_density>
        <density_change>
          <above_depth>0</above_depth>
          <density>1</density>
        </density_change>
      </graded_buoyancy>
      <!-- Enable by model name -->
      <enable>orca4</enable>
    </plugin>
    <!--wave 1-->
    <plugin
        filename="gz-waves1-waves-model-system"
        name="gz::sim::systems::WavesModel">
        <static>0</static>
        <update_rate>30</update_rate>
        <wave>
          <!-- Grid dimensions
            - The tile_size and cell_count may be a single value
              for square grids, or a 2d vector if different resolution
              is desired along the x and y axis.
            - The cell_count must be a power of 2 for fft waves
          -->
          <!-- Either: single value for square grids -->
          <tile_size>256.0</tile_size>
          <cell_count>128</cell_count>

          <!-- Or: 2d vectors for different resolution in each axis -->
          <tile_size>256.0 64.0</tile_size>
          <cell_count>128 32</cell_count>

          <!-- Wave algorithms
            - These elements specify the wave generation method
              and wave spectrum parameters.
          -->

          <!-- Either: `fft` waves parameters -->
          <algorithm>fft</algorithm>
          <wind_speed>5.0</wind_speed>
          <wind_angle_deg>135</wind_angle_deg>
          <steepness>2</steepness>

          <!-- Or: `trochoid` waves parameters -->
          <algorithm>trochoid</algorithm>
          <number>3</number>
          <scale>1.5</scale>
          <angle>0.4</angle>
          <amplitude>0.4</amplitude>
          <period>8.0</period>
          <phase>0.0</phase>
          <steepness>1.0</steepness>
          <direction>1 0</direction>
        </wave>
    </plugin>
    <!--wave 2-->
    <plugin
        filename="gz-waves1-waves-visual-system"
        name="gz::sim::systems::WavesVisual">
      <static>0</static>

      <!-- set the mesh deformation method  -->
      <mesh_deformation_method>DYNAMIC_GEOMETRY</mesh_deformation_method>

      <!-- number of additional tiles along each axis -->
      <tiles_x>-1 1</tiles_x>
      <tiles_y>-1 1</tiles_y>
      <wave>
        <!-- `fft` wave parameters -->
        <algorithm>fft</algorithm>
        <tile_size>256.0</tile_size>
        <cell_count>128</cell_count>
        <wind_speed>5.0</wind_speed>
        <wind_angle_deg>135</wind_angle_deg>
        <steepness>2</steepness>
      </wave>

      <!--
        Shader parameters only apply when using DYNAMIC_TEXTURE
      -->

      <!-- shader program -->
      <shader language="glsl">
        <vertex>materials/waves_vs.glsl</vertex>
        <fragment>materials/waves_fs.glsl</fragment>
      </shader>
      <shader language="metal">
        <vertex>materials/waves_vs.metal</vertex>
        <fragment>materials/waves_fs.metal</fragment>
      </shader>

      <!-- vertex shader params -->
      <param>
        <shader>vertex</shader>
        <name>world_matrix</name>
      </param>
      <param>
        <shader>vertex</shader>
        <name>worldviewproj_matrix</name>
      </param>
      <param>
        <shader>vertex</shader>
        <name>camera_position</name>
      </param>
      <param>
        <shader>vertex</shader>
        <name>rescale</name>
        <value>0.5</value>
        <type>float</type>
      </param>
      <param>
        <shader>vertex</shader>
        <name>bumpScale</name>
        <value>64 64</value>
        <type>float_array</type>
      </param>
      <param>
        <shader>vertex</shader>
        <name>bumpSpeed</name>
        <value>0.01 0.01</value>
        <type>float_array</type>
      </param>
      <param>
        <shader>vertex</shader>
        <name>t</name>
        <value>TIME</value>
      </param>

      <!-- pixel shader params -->
      <param>
        <shader>fragment</shader>
        <name>deepColor</name>
        <value>0.0 0.05 0.2 1.0</value>
        <type>float_array</type>
      </param>
      <param>
        <shader>fragment</shader>
        <name>shallowColor</name>
        <value>0.0 0.1 0.3 1.0</value>
        <type>float_array</type>
      </param>
      <param>
        <shader>fragment</shader>
        <name>fresnelPower</name>
        <value>5.0</value>
        <type>float</type>
      </param>
      <param>
        <shader>fragment</shader>
        <name>hdrMultiplier</name>
        <value>0.4</value>
        <type>float</type>
      </param>
      <param>
        <shader>fragment</shader>
        <name>bumpMap</name>
        <value>materials/wave_normals.dds</value>
        <type>texture</type>
        <arg>0</arg>
      </param>
      <param>
        <shader>fragment</shader>
        <name>cubeMap</name>
        <value>materials/skybox_lowres.dds</value>
        <type>texture_cube</type>
        <arg>1</arg>
      </param>
    </plugin>
      <!--hydrodynamics-->
    <plugin
      filename="gz-waves1-hydrodynamics-system"
      name="gz::sim::systems::Hydrodynamics">

      <!-- Apply hydrodynamics to the entire model (default) -->
      <enable>model_name</enable>

      <!-- Or apply hydrodynamics to named links -->
      <enable>model_name::link1</enable>
      <enable>model_name::link2</enable>

      <!-- Or apply hydrodynamics to named collisions -->
      <enable>model_name::link1::collision1</enable>
      <enable>model_name::link1::collision2</enable>

      <!-- Hydrodynamics -->
      <hydrodynamics>
        <damping_on>1</damping_on>
        <viscous_drag_on>1</viscous_drag_on>
        <pressure_drag_on>1</pressure_drag_on>

        <!-- Linear and Angular Damping -->  
        <cDampL1>1.0E-6</cDampL1>
        <cDampL2>1.0E-6</cDampL2>
        <cDampR1>1.0E-6</cDampR1>
        <cDampR2>1.0E-6</cDampR2>

        <!-- 'Pressure' Drag -->
        <cPDrag1>1.0E+2</cPDrag1>
        <cPDrag2>1.0E+2</cPDrag2>
        <fPDrag>0.4</fPDrag>
        <cSDrag1>1.0E+2</cSDrag1>
        <cSDrag2>1.0E+2</cSDrag2>
        <fSDrag>0.4</fSDrag>
        <vRDrag>1.0</vRDrag>
      </hydrodynamics>

      <!-- Control visibility of markers -->
      <markers>
        <update_rate>10</update_rate>
        <water_patch>1</water_patch>
        <waterline>1</waterline>
        <underwater_surface>1</underwater_surface>
      </markers>
    </plugin>


    <include>
      <uri>https://fuel.gazebosim.org/1.0/OpenRobotics/models/Sun</uri>
    </include>

    <include>
      <uri>model://sea_surface</uri>
      <pose>0 7 0 0 0 0</pose>
    </include>

    <include>
     <uri>model://sand_heightmap</uri>
     <pose>0 7 -10 0 0 0</pose>
    </include>

    <include>
      <uri>model://orca4</uri>
      <pose>0 0 -0.2 0 0 0</pose>
    </include>

    <include>
      <uri>model://sailboat</uri>
      <pose>2 0 -1.15 0 0 0</pose>
    </include>

    <include>
     <uri>model://axes</uri>
     <pose>0 0 0.2 0 0 0</pose>
    </include>

  </world>
</sdf>
